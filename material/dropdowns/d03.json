
{"version":"0.0.2","signiture":"notebook","tasks":[{"uniqueid":"se74l7YRo4UrT6o","desc":"none set","type":"js","input":"import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\n# Load the Iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Attribute Selection - Select the top 2 features using ANOVA F-value\nselector = SelectKBest(score_func=f_classif, k=2)\nX_selected = selector.fit_transform(X, y)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)\n\n# Model Testing - Train a Support Vector Machine (SVM) classifier\nmodel = SVC(kernel='linear')\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate accuracy score\naccuracy = accuracy_score(y_test, y_pred)\n\n# Print the results\nprint(\"Selected Features:\")\nprint(selector.get_support(indices=True))  # Indices of selected features\n\nprint(\"\\nTraining set size:\", len(X_train))\nprint(\"Testing set size:\", len(X_test))\nprint(\"\\nTrue labels of test set:\", y_test)\nprint(\"Predicted labels of test set:\", y_pred)\nprint(\"Accuracy:\", accuracy)\n"},{"uniqueid":"u30Hmu7VSbav034","desc":"none set","type":"js","input":"import numpy as np\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectPercentile, f_classif\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the Breast Cancer dataset\ncancer = load_breast_cancer()\nX, y = cancer.data, cancer.target\n\n# Attribute Selection - Select the top 20% features using ANOVA F-value\nselector = SelectPercentile(score_func=f_classif, percentile=20)\nX_selected = selector.fit_transform(X, y)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)\n\n# Model Testing - Train a Random Forest classifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate accuracy score\naccuracy = accuracy_score(y_test, y_pred)\n\n# Print the results\nprint(\"Selected Features:\")\nprint(selector.get_support(indices=True))  # Indices of selected features\n\nprint(\"\\nTraining set size:\", len(X_train))\nprint(\"Testing set size:\", len(X_test))\nprint(\"\\nTrue labels of test set:\", y_test)\nprint(\"Predicted labels of test set:\", y_pred)\nprint(\"Accuracy:\", accuracy)\n"},{"uniqueid":"HhDzkEpCVTe1t6S","desc":"none set","type":"js","input":"import numpy as np\nfrom sklearn.datasets import load_wine\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Load the Wine dataset\nwine = load_wine()\nX, y = wine.data, wine.target\n\n# Attribute Selection - Select features using Random Forest feature importance\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X, y)\n\nselector = SelectFromModel(rf_model, threshold='median')\nX_selected = selector.fit_transform(X, y)\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X_selected, y, test_size=0.2, random_state=42)\n\n# Model Testing - Train a Random Forest classifier on selected features\nmodel = RandomForestClassifier(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate accuracy score\naccuracy = accuracy_score(y_test, y_pred)\n\n# Print the results\nprint(\"Selected Features:\")\nprint(selector.get_support(indices=True))  # Indices of selected features\n\nprint(\"\\nTraining set size:\", len(X_train))\nprint(\"Testing set size:\", len(X_test))\nprint(\"\\nTrue labels of test set:\", y_test)\nprint(\"Predicted labels of test set:\", y_pred)\nprint(\"Accuracy:\", accuracy)\n"}]}